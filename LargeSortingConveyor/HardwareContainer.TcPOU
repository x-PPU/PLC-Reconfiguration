<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="HardwareContainer" Id="{b960c084-6fd7-473c-9663-89a27f67b519}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HardwareContainer
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// hardware control POUs
	m_LSC: LargeSortingConveyor;
	m_indic: ActivityIndicator(i_signalProcVar := EProcessVariables.Test_LSCFree);
	
	// products
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	m_LSCWP: xPPUProduct(EProcessVariables.LSC_ProductType);
	
	// hardware observation (if not included in hardware control)
	m_observeLSC: ObserveLSC(ADR(m_LSC), ADR(m_LSCWP));
	
	// control primitives
	m_LSCTransferWPToRampStart: LSC_TransferWorkpieceTo_RampStart(ADR(m_LSC));
	m_LSCTransferWPToRampMid: LSC_TransferWorkpieceTo_RampMid(ADR(m_LSC));
	m_LSCTransferWPToRampEnd: LSC_TransferWorkpieceTo_RampEnd(ADR(m_LSC));
// 	m_LSCTransferWPToPAC: LSC_TransferWorkpieceTo_PAC(ADR(m_LSC));
	m_LSCSearchWorkpiece: LSC_SearchWorkpiece(ADR(m_LSC));
	
	m_delay: Delay;
	m_indicCP_LSC: IndicateActivity(i_id := EPrimitives.Gen_IndicateActive_LSC, i_ptrIndicator := ADR(m_indic));
	m_forceVal_LSC: ForceProcessVariable(i_id := EPrimitives.Gen_ForceVariable_LSC);
	
	// module sequences
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{46a29eb6-2dc7-430a-91f3-3fac7793783c}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	i_ptrStateTracker: POINTER TO StateTracker;
	i_ptrProcessManager: POINTER TO ProcessManager;
	
	i_ptrErrorManager: POINTER TO ErrorManagerBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// provide Services to Behaviors
m_LSCTransferWPToRampStart.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_LSCTransferWPToRampMid.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_LSCTransferWPToRampEnd.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
// m_LSCTransferWPToPAC.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_LSCSearchWorkpiece.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);

m_delay.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_indicCP_LSC.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_forceVal_LSC.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);

// provide Behaviors to the Process Manager
i_ptrProcessManager^.AddPrimitive(ADR(m_LSCTransferWPToRampStart));
i_ptrProcessManager^.AddPrimitive(ADR(m_LSCTransferWPToRampMid));
i_ptrProcessManager^.AddPrimitive(ADR(m_LSCTransferWPToRampEnd));
// i_ptrProcessManager^.AddPrimitive(ADR(m_LSCTransferWPToPAC));
i_ptrProcessManager^.AddPrimitive(ADR(m_LSCSearchWorkpiece));

i_ptrProcessManager^.AddPrimitive(ADR(m_delay));
i_ptrProcessManager^.AddPrimitive(ADR(m_indicCP_LSC));
i_ptrProcessManager^.AddPrimitive(ADR(m_forceVal_LSC));

// provide observations to the Process Manager
i_ptrStateTracker^.AddObservation(ADR(m_observeLSC));
i_ptrStateTracker^.AddObservation(ADR(m_indic));

// provide workpieces to the Process Manager
i_ptrStateTracker^.RegisterLocalProduct(EProducts.LSC_product, ADR(m_LSCWP));
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="HardwareContainer">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="HardwareContainer.FB_init">
      <LineId Id="1" Count="7" />
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="9" Count="8" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="21" Count="3" />
    </LineIds>
  </POU>
</TcPlcObject>