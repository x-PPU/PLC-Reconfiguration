<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BoolExpression" Id="{acc4a6df-e3a7-4282-86d6-ebc1d1a604c0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BoolExpression IMPLEMENTS IExpression
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_left: IExpression;
	m_sign: EBoolOperation;
	m_right: IExpression;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{dee79839-d31c-452e-b477-a7c8985755f8}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	i_left: IExpression;
	i_sign: EBoolOperation;
	i_right: IExpression;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_left := i_left;
m_sign := i_sign;
m_right := i_right;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTrue" Id="{e490e48f-66a4-42a5-ba79-84271a4e1bc9}">
      <Declaration><![CDATA[METHOD IsTrue : BOOL
VAR_INPUT
	i_ptrProcessState: POINTER TO ProcessState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE m_sign OF
	EBoolOperation.none:
	IsTrue := FALSE;
	
	EBoolOperation.and_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) AND m_right.IsTrue(i_ptrProcessState);
	
	EBoolOperation.nand_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) AND NOT m_right.IsTrue(i_ptrProcessState);
	
	EBoolOperation.or_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) OR m_right.IsTrue(i_ptrProcessState);
		
	EBoolOperation.nor_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) OR NOT m_right.IsTrue(i_ptrProcessState);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToString" Id="{dc64b7cf-6408-4497-95c9-5a3ee8f11d6c}">
      <Declaration><![CDATA[METHOD ToString : STRING(256)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE m_sign OF
	EBoolOperation.and_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')AND(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.nand_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')NAND(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.or_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')OR(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.nor_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')NOR(', CONCAT(m_right.ToString(), ')'))));
	
	ELSE
		ToString := '';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BoolExpression">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="BoolExpression.FB_init">
      <LineId Id="13" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="BoolExpression.IsTrue">
      <LineId Id="30" Count="14" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="BoolExpression.ToString">
      <LineId Id="5" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>