<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ProcessState" Id="{ec18b207-8211-4814-8766-e09236d87b7a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ProcessState
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_values: ARRAY [ResiConst.ARR_MIN..ResiConst.STATE_ARR_MAX] OF SValue;
	m_ptrRaConnector: POINTER TO RaConnector;
	
	m_varExp: ValueExpression(EDataType.numeric, FALSE, 0, '', TRUE);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// manages all the system variables]]></ST>
    </Implementation>
    <Method Name="ProvideServices" Id="{c05109a8-c70a-45aa-8b3b-b721a0b3b5a1}">
      <Declaration><![CDATA[METHOD ProvideServices : BOOL
VAR_INPUT
	i_ptrRaConnector: POINTER TO RaConnector;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_ptrRaConnector := i_ptrRaConnector;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Retrieve" Id="{0e3dcca9-10f6-48c6-bcec-257b624314af}">
      <Declaration><![CDATA[METHOD Retrieve : SValue
VAR_INPUT
	i_id: UINT;
	i_checkDef: BOOL;
END_VAR
VAR
	m_val: SValue;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_val := m_values[i_id];

IF i_checkDef THEN
	IF m_val.Defined THEN
		Retrieve:= m_val;
	ELSE
		m_varExp.FB_init(FALSE, FALSE, EDataType.numeric, FALSE, i_id, '', TRUE);
		m_ptrRaConnector^.RequestRecovery(m_varExp, 'ProcessState.Retrieve');
	END_IF	
ELSE
	Retrieve := m_val;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetValue" Id="{1f66cedc-63f4-4624-a6f2-3ae03a91a9b0}">
      <Declaration><![CDATA[METHOD SetValue : BOOL
VAR_INPUT
	i_id: UINT;
	i_val: SValue;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetValue := FALSE;
m_values[i_id].DataType := i_val.DataType;
m_values[i_id].Defined := i_val.Defined;

CASE i_val.DataType OF
	EDataType.binary:
		m_values[i_id].Value.Binary := i_val.Value.Binary;
		SetValue := TRUE;
		
	EDataType.numeric:
		m_values[i_id].Value.Numeric := i_val.Value.Numeric;
		SetValue := TRUE;
		
	EDataType.string_t:
		m_values[i_id].Value.String_t := i_val.Value.String_t;
		SetValue := TRUE;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateState_Binary" Id="{f24f9c25-e30c-4e3b-81cd-9abfc8d9bb8c}">
      <Declaration><![CDATA[METHOD UpdateState_Binary : BOOL
VAR_INPUT
	i_id: UINT;
	i_value: BOOL;
	
	// writes even if the existing data type does not match
	i_force: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_force THEN
	m_values[i_id].DataType := EDataType.binary;
	m_values[i_id].Value.Binary := FALSE;
END_IF

IF m_values[i_id].DataType = EDataType.binary THEN
	m_values[i_id].Value.Binary := i_value;
	UpdateState_Binary := TRUE;
ELSE
	UpdateState_Binary := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateState_Defined" Id="{8cdc22d2-b29e-44a4-a651-6138a603d0e0}">
      <Declaration><![CDATA[METHOD UpdateState_Defined : BOOL
VAR_INPUT
	i_id: UINT;
	i_defined: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_values[i_id].Defined := i_defined;
UpdateState_Defined := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateState_Numeric" Id="{d1b3db2a-e951-4b51-8ff5-aebf8bc96701}">
      <Declaration><![CDATA[METHOD UpdateState_Numeric : BOOL
VAR_INPUT
	i_id: UINT;
	i_value: LREAL;
	
	// writes even if the existing data type does not match
	i_force: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_force THEN
	m_values[i_id].DataType := EDataType.numeric;
	m_values[i_id].Value.Numeric := 0;
END_IF

IF m_values[i_id].DataType = EDataType.numeric THEN
	m_values[i_id].Value.Numeric := i_value;
	UpdateState_Numeric := TRUE;
ELSE
	UpdateState_Numeric := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateState_NumericIncrement" Id="{1cfa2e4f-a1f3-46ec-91f7-e0243d4728c1}">
      <Declaration><![CDATA[METHOD UpdateState_NumericIncrement : BOOL
VAR_INPUT
	i_id: UINT;
	
	// writes even if the existing data type does not match
	i_force: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_force THEN
	m_values[i_id].DataType := EDataType.numeric;
END_IF

IF m_values[i_id].DataType = EDataType.numeric THEN
	m_values[i_id].Value.Numeric := m_values[i_id].Value.Numeric + 1;
	UpdateState_NumericIncrement := TRUE;
ELSE
	UpdateState_NumericIncrement := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateState_String" Id="{681ea6d1-a1df-47b0-add3-adfe550f3002}">
      <Declaration><![CDATA[METHOD UpdateState_String : BOOL
VAR_INPUT
	i_id: UINT;
	i_value: STRING;
	
	// writes even if the existing data type does not match
	i_force: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_force THEN
	m_values[i_id].DataType := EDataType.string_t;
	m_values[i_id].Value.String_t := '';
END_IF

IF m_values[i_id].DataType = EDataType.string_t THEN
	m_values[i_id].Value.String_t := i_value;
	UpdateState_String := TRUE;
ELSE
	UpdateState_String := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ProcessState">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.ProvideServices">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.Retrieve">
      <LineId Id="101" Count="11" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.SetValue">
      <LineId Id="12" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.UpdateState_Binary">
      <LineId Id="95" Count="1" />
      <LineId Id="99" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.UpdateState_Defined">
      <LineId Id="15" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.UpdateState_Numeric">
      <LineId Id="99" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.UpdateState_NumericIncrement">
      <LineId Id="12" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ProcessState.UpdateState_String">
      <LineId Id="97" Count="0" />
      <LineId Id="100" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>