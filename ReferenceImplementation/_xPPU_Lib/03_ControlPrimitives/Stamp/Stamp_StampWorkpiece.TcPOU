<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Stamp_StampWorkpiece" Id="{43a8f1ee-c4bc-4d50-abf6-1a0e6209c669}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Stamp_StampWorkpiece EXTENDS ControlPrimitiveBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// (EProcessVariables.Stamp_WorkpieceState = 1) AND (EProcessVariables.Stamp_WPAtStamp = TRUE)
	m_compExpr273: ComparisonExpression(EProcessVariables.Stamp_WorkpieceState, EComparisonType.equals, EDataType.numeric, FALSE, 1, '', TRUE);
	m_compExpr275: ComparisonExpression(EProcessVariables.Stamp_WPAtStamp, EComparisonType.equals, EDataType.binary, TRUE, 0, '', TRUE);
	m_precondition: BoolExpression(m_compExpr273, EBoolOperation.and_op, m_compExpr275);
	
	// EProcessVariables.Stamp_WorkpieceState = 2
	m_postcondition: ComparisonExpression(EProcessVariables.Stamp_WorkpieceState, EComparisonType.equals, EDataType.numeric, FALSE, 2, '', TRUE);

	m_ptrStamp: POINTER TO Stamp;
	
	m_step: INT := 0;
	t_Stamp : TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{4b258602-9728-45da-88a5-82994e93e50a}">
      <Declaration><![CDATA[METHOD Abort : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_ptrStamp^.m_stampingCylinder.METH_Retract();
m_ptrStamp^.m_slidingCylinder.METH_Extend();
Abort := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteInternal" Id="{20ea73f5-52e1-4027-b77b-4b90b04c41c4}">
      <Declaration><![CDATA[(* Execution logic of this Control Primitive. *)
METHOD PROTECTED ExecuteInternal : BOOL
VAR_INPUT
	(*
	 * pressure_white: INT
	 * pressure_black: INT
	 * pressure_metal: INT
	 *)
	i_params: ParameterSet;
END_VAR
VAR
	m_pressureVal: SValue;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecuteInternal := FALSE;

CASE m_step OF
	0: // take in wp
	m_ptrStamp^.m_slidingCylinder.METH_Retract();
	IF m_ptrStamp^.m_slidingCylinder.Retracted THEN
		m_step := 1;
	END_IF
	
	1: // stamp wp
	m_ptrStamp^.StampPressure := GetPressure(i_params);
	m_ptrStamp^.m_stampingCylinder.METH_Extend();
	t_Stamp(IN:=TRUE, PT:=T#1500MS);
	IF t_Stamp.Q THEN
		IF m_ptrStamp^.StampPressure >= m_pressureVal.Value.Numeric THEN
			m_step := 2;
			t_Stamp(IN:=FALSE);
		END_IF
	END_IF
	
	2: // retract stamp
	m_ptrStamp^.m_stampingCylinder.METH_Retract();
	IF m_ptrStamp^.m_stampingCylinder.Retracted THEN
		m_step := 3;
	END_IF
	
	3: // provide wp
	m_ptrStamp^.m_slidingCylinder.METH_Extend();
	IF m_ptrStamp^.m_slidingCylinder.Extended THEN
		m_step := 0;
		ExecuteInternal := TRUE;
	END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ae19cc40-2395-457d-a4db-026b5c45012b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	i_ptrStamp: POINTER TO Stamp;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_ptrStamp := i_ptrStamp;

m_id := EPrimitives.Stamp_StampWorkpiece;
m_timeout := T#200S;
m_paramDefinition := 'pressure_white:INT;pressure_black:INT;pressure_metal:INT;';

Precondition := m_precondition;
Postcondition := m_postcondition;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetPressure" Id="{a758e95a-746f-4659-933f-dd77eb48177a}">
      <Declaration><![CDATA[METHOD PRIVATE GetPressure : INT
VAR_INPUT
	(*
	 * pressure_white: INT
	 * pressure_black: INT
	 * pressure_metal: INT
	 *)
	i_params: ParameterSet;
END_VAR
VAR
	m_pressureVal: SValue;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE LREAL_TO_UINT(m_st^.GetNumeric(EProcessVariables.Stamp_ProductType)) OF
	EProductTypes.white:
		m_pressureVal := i_params.Retrieve('pressure_white');
		GetPressure := LREAL_TO_INT(m_pressureVal.Value.Numeric);
	EProductTypes.black:
		m_pressureVal := i_params.Retrieve('pressure_black');
		GetPressure := LREAL_TO_INT(m_pressureVal.Value.Numeric);
	EProductTypes.metal:
		m_pressureVal := i_params.Retrieve('pressure_metal');
		GetPressure := LREAL_TO_INT(m_pressureVal.Value.Numeric);
	ELSE
		GetPressure := 0;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Stamp_StampWorkpiece">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Stamp_StampWorkpiece.Abort">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="Stamp_StampWorkpiece.ExecuteInternal">
      <LineId Id="144" Count="9" />
      <LineId Id="169" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="198" Count="5" />
      <LineId Id="183" Count="0" />
      <LineId Id="162" Count="6" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="Stamp_StampWorkpiece.FB_init">
      <LineId Id="19" Count="3" />
      <LineId Id="32" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="Stamp_StampWorkpiece.GetPressure">
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>