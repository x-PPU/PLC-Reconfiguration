<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ObservePicAlpha" Id="{7c738ab1-e089-4525-8ff1-1844559ae7af}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ObservePicAlpha EXTENDS HardwareObservationBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_ptrPicAlpha: POINTER TO PicAlpha;
	m_ptrPicAlphaWP: POINTER TO xPPUProduct;

	m_PicAlphaPosDefinedState: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{11d83411-a87e-4016-a287-680012c4ff37}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	i_ptrPicAlpha: POINTER TO PicAlpha;
	i_ptrWP: POINTER TO IProduct;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_ptrPicAlpha := i_ptrPicAlpha;
IF NOT __QUERYPOINTER(i_ptrWP^, m_ptrPicAlphaWP) THEN
	FB_init := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetDefinition" Id="{52bb3006-e100-4395-a758-ee916d3b922c}">
      <Declaration><![CDATA[METHOD  ResetDefinition : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_PicAlphaPosDefinedState := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateProcessObservation" Id="{5143debb-aed7-4c9c-80cf-0054cc211d06}">
      <Declaration><![CDATA[(* Update an instance of ProcessState with the part of the process that can be observed by this Hardware Interface. *)
METHOD UpdateProcessObservation : BOOL
VAR_IN_OUT
	io_processState: ProcessState;
END_VAR
VAR
	m_sensorCount : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_AtPos1, m_ptrPicAlpha^.PresenceSensorPosition1Value, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_AtPos2, m_ptrPicAlpha^.PresenceSensorPosition2Value, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_AtPos3, m_ptrPicAlpha^.PresenceSensorPosition3Value, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_AtPos4, m_ptrPicAlpha^.PresenceSensorPosition4Value, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_HoldingWorkpiece, m_ptrPicAlpha^.o_VacuumGripper.WPTaken, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_CylinderExtended, m_ptrPicAlpha^.o_MonostableCylinder.Extended, i_force := TRUE);
io_processState.UpdateState_Binary(EProcessVariables.PicAlpha_CylinderRetracted, m_ptrPicAlpha^.o_MonostableCylinder.Retracted, i_force := TRUE);
io_processState.UpdateState_Numeric(EProcessVariables.PicAlpha_Distance, INT_TO_LREAL(m_ptrPicAlpha^.o_Distance), i_force := TRUE);

io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_HoldingWorkpiece, TRUE);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_CylinderExtended, TRUE);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_CylinderRetracted, TRUE);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_Distance, TRUE);

// update WP info (if there are sensors available), then update the process variables list

IF m_ptrPicAlpha^.PresenceSensorPosition3Value AND NOT (m_ptrPicAlpha^.PresenceSensorPosition1Value OR m_ptrPicAlpha^.PresenceSensorPosition2Value OR m_ptrPicAlpha^.PresenceSensorPosition4Value) THEN
	m_PicAlphaPosDefinedState :=  TRUE;
END_IF
IF m_PicAlphaPosDefinedState THEN
	m_sensorCount := 0;	
END_IF
IF m_ptrPicAlpha^.PresenceSensorPosition1Value OR m_ptrPicAlpha^.PresenceSensorPosition2Value THEN
 	m_sensorCount := m_sensorCount + 1;
END_IF
IF m_ptrPicAlpha^.PresenceSensorPosition3Value THEN
 	m_sensorCount := m_sensorCount + 1;
END_IF
IF m_ptrPicAlpha^.PresenceSensorPosition4Value THEN
 	m_sensorCount := m_sensorCount + 1;
END_IF

IF m_sensorCount > 1 THEN // if more than one sensor is pressed at the same time, the position is undefined
	m_PicAlphaPosDefinedState := FALSE;	
END_IF

io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_AtPos1, m_PicAlphaPosDefinedState);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_AtPos2, m_PicAlphaPosDefinedState);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_AtPos3, m_PicAlphaPosDefinedState);
io_processState.UpdateState_Defined(EProcessVariables.PicAlpha_AtPos4, m_PicAlphaPosDefinedState);

io_processState.UpdateState_Numeric(EProcessVariables.PicAlpha_ProductType, UINT_TO_LREAL(m_ptrPicAlphaWP^.Material), TRUE);
io_processState.UpdateState_Defined(EprocessVariables.PAC_ProductType_1, TRUE);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ObservePicAlpha">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="ObservePicAlpha.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ObservePicAlpha.ResetDefinition">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ObservePicAlpha.UpdateProcessObservation">
      <LineId Id="17" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="55" Count="1" />
      <LineId Id="70" Count="3" />
      <LineId Id="89" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="97" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="2" />
      <LineId Id="104" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>