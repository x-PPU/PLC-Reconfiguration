<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="BoolExpression" Id="{14ad2b87-acd1-4e11-9ddb-9a4738d54e34}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'OPC.UA.DA.StructuredType' := '1'}
FUNCTION_BLOCK BoolExpression IMPLEMENTS IExpression
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_left: IExpression;
	m_sign: EBoolOperation;
	m_right: IExpression;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{1bb0979e-fb68-43c2-bdc6-ddbf7613635b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	i_left: IExpression;
	i_sign: EBoolOperation;
	i_right: IExpression;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_left := i_left;
m_sign := i_sign;
m_right := i_right;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTrue" Id="{e6e973f8-64f8-4656-8b44-eb531cc728a4}">
      <Declaration><![CDATA[METHOD IsTrue : BOOL
VAR_INPUT
	i_ptrProcessState: POINTER TO ProcessState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE m_sign OF
	EBoolOperation.none:
	IsTrue := FALSE;
	
	EBoolOperation.and_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) AND m_right.IsTrue(i_ptrProcessState);
	
	EBoolOperation.nand_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) AND NOT m_right.IsTrue(i_ptrProcessState);
	
	EBoolOperation.or_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) OR m_right.IsTrue(i_ptrProcessState);
		
	EBoolOperation.nor_op:
	IsTrue := m_left.IsTrue(i_ptrProcessState) OR NOT m_right.IsTrue(i_ptrProcessState);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToString" Id="{e4062dd6-6f60-401f-bafb-c35e9110b323}">
      <Declaration><![CDATA[METHOD ToString : STRING(256)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE m_sign OF
	EBoolOperation.and_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')AND(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.nand_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')NAND(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.or_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')OR(', CONCAT(m_right.ToString(), ')'))));
	
	EBoolOperation.nor_op:
		ToString := CONCAT('(', CONCAT(m_left.ToString(), CONCAT(')NOR(', CONCAT(m_right.ToString(), ')'))));
	
	ELSE
		ToString := '';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BoolExpression">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="BoolExpression.FB_init">
      <LineId Id="1" Count="2" />
    </LineIds>
    <LineIds Name="BoolExpression.IsTrue">
      <LineId Id="1" Count="15" />
    </LineIds>
    <LineIds Name="BoolExpression.ToString">
      <LineId Id="1" Count="15" />
    </LineIds>
  </POU>
</TcPlcObject>