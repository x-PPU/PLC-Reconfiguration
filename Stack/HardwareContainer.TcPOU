<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="HardwareContainer" Id="{132328cc-553a-46da-9103-3a9f31f2c625}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HardwareContainer
VAR
	// hardware control POUs
	m_stack: Stack;
	m_indic: ActivityIndicator(i_signalProcVar := EProcessVariables.Test_StackFree);
	
	// products
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	m_stackWP: xPPUProduct(EProcessVariables.Stack_ProductType);
	
	// hardware observation (if not included in hardware control)
	m_observeStack: ObserveStack(ADR(m_stack), ADR(m_stackWP));
	
	// control primitives
	m_stackProvide: Stack_ProvideWorkpiece(ADR(m_stack));
	m_delay: Delay;
	m_indicCP_Stack: IndicateActivity(i_id := EPrimitives.Gen_IndicateActive_Stack, i_ptrIndicator := ADR(m_indic));
	m_forceVal_Stack: ForceProcessVariable(i_id := EPrimitives.Gen_ForceVariable_Stack);
	
	// module sequences
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{ed76f39a-89bd-450b-9e7c-d0553f85bdab}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	i_ptrStateTracker: POINTER TO StateTracker;
	i_ptrProcessManager: POINTER TO ProcessManager;
	
	i_ptrErrorManager: POINTER TO ErrorManagerBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_stackProvide.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_delay.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_indicCP_Stack.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);
m_forceVal_Stack.ProvideServices(i_ptrProcessManager, i_ptrStateTracker);

// provide Behaviors to the Process Manager
i_ptrProcessManager^.AddPrimitive(ADR(m_stackProvide));
i_ptrProcessManager^.AddPrimitive(ADR(m_delay));
i_ptrProcessManager^.AddPrimitive(ADR(m_indicCP_Stack));
i_ptrProcessManager^.AddPrimitive(ADR(m_forceVal_Stack));

// provide observations to the Process Manager
i_ptrStateTracker^.AddObservation(ADR(m_observeStack));
i_ptrStateTracker^.AddObservation(ADR(m_indic));

// provide workpieces to the Process Manager
i_ptrStateTracker^.RegisterLocalProduct(EProducts.stack_product, ADR(m_stackWP));
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="HardwareContainer">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="HardwareContainer.FB_init">
      <LineId Id="1" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="3" Count="3" />
      <LineId Id="15" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="3" />
    </LineIds>
  </POU>
</TcPlcObject>